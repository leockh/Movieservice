/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leo.test.movieservice.api;

import com.leo.test.movieservice.model.Movie;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "movie", description = "the movie API")
public interface MovieApi {

    default MovieApiDelegate getDelegate() {
        return new MovieApiDelegate() {};
    }

    /**
     * POST /movie : Add a new movie
     * Add a new movie
     *
     * @param movie Create a new movie (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addMovie",
        summary = "Add a new movie",
        tags = { "movie" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/movie",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Movie> addMovie(
        @Parameter(name = "Movie", description = "Create a new movie", required = true) @Valid @RequestBody Movie movie
    ) {
        return getDelegate().addMovie(movie);
    }


    /**
     * DELETE /movie/{movieId} : Deletes a movie
     * delete a movie
     *
     * @param movieId Movie id to delete (required)
     * @return Invalid Movie value (status code 400)
     */
    @Operation(
        operationId = "deleteMovie",
        summary = "Deletes a movie",
        tags = { "movie" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid Movie value")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/movie/{movieId}"
    )
    default ResponseEntity<Void> deleteMovie(
        @Min(1L) @Parameter(name = "movieId", description = "Movie id to delete", required = true) @PathVariable("movieId") Long movieId
    ) {
        return getDelegate().deleteMovie(movieId);
    }


    /**
     * DELETE /movie/{movieId}/rating : Delete movie rating
     * Delete movie rating
     *
     * @param movieId ID of movie to return (required)
     * @return successful operation (status code 200)
     *         or Invalid tag value (status code 400)
     */
    @Operation(
        operationId = "deleteRating",
        summary = "Delete movie rating",
        tags = { "movie" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid tag value")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/movie/{movieId}/rating",
        produces = { "application/json" }
    )
    default ResponseEntity<Movie> deleteRating(
        @Min(1L) @Parameter(name = "movieId", description = "ID of movie to return", required = true) @PathVariable("movieId") Long movieId
    ) {
        return getDelegate().deleteRating(movieId);
    }


    /**
     * GET /movie/findByDirectorId/{directorId} : Finds Movies by director
     * Finds Movies by director
     *
     * @param directorId director value that need to be considered for filter (required)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "findMoviesByDirector",
        summary = "Finds Movies by director",
        tags = { "movie" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/movie/findByDirectorId/{directorId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Movie>> findMoviesByDirector(
        @Min(0L) @Parameter(name = "directorId", description = "director value that need to be considered for filter", required = true) @PathVariable("directorId") Long directorId
    ) {
        return getDelegate().findMoviesByDirector(directorId);
    }


    /**
     * GET /movie/findByRating/{rating} : Finds Movies by rating
     * Finds Movies by rating
     *
     * @param rating rating value that need to be considered for filter (required)
     * @return successful operation (status code 200)
     *         or Invalid tag value (status code 400)
     */
    @Operation(
        operationId = "findMoviesByRating",
        summary = "Finds Movies by rating",
        tags = { "movie" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid tag value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/movie/findByRating/{rating}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Movie>> findMoviesByRating(
        @Min(0) @Parameter(name = "rating", description = "rating value that need to be considered for filter", required = true) @PathVariable("rating") Integer rating
    ) {
        return getDelegate().findMoviesByRating(rating);
    }


    /**
     * GET /movie : Returns all movies
     * Returns movies
     *
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "getAllMovies",
        summary = "Returns all movies",
        tags = { "movie" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/movie",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Movie>> getAllMovies(
        
    ) {
        return getDelegate().getAllMovies();
    }


    /**
     * GET /movie/{movieId} : Find movie by ID
     * Returns a single movie
     *
     * @param movieId ID of movie to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Movie not found (status code 404)
     */
    @Operation(
        operationId = "getMovieById",
        summary = "Find movie by ID",
        tags = { "movie" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Movie not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/movie/{movieId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Movie> getMovieById(
        @Min(1L) @Parameter(name = "movieId", description = "ID of movie to return", required = true) @PathVariable("movieId") Long movieId
    ) {
        return getDelegate().getMovieById(movieId);
    }


    /**
     * GET /movie/{movieId}/rating : Returns movie rating
     * Returns movie rating
     *
     * @param movieId ID of movie to return (required)
     * @return successful operation (status code 200)
     *         or Invalid tag value (status code 400)
     */
    @Operation(
        operationId = "getRating",
        summary = "Returns movie rating",
        tags = { "movie" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid tag value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/movie/{movieId}/rating",
        produces = { "application/json" }
    )
    default ResponseEntity<Movie> getRating(
        @Min(1L) @Parameter(name = "movieId", description = "ID of movie to return", required = true) @PathVariable("movieId") Long movieId
    ) {
        return getDelegate().getRating(movieId);
    }


    /**
     * PUT /movie : Update an existing movie
     * Update an existing movie by Id
     *
     * @param movie Update an existent movie (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Movie not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateMovie",
        summary = "Update an existing movie",
        tags = { "movie" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Movie.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Movie not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/movie",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Movie> updateMovie(
        @Parameter(name = "Movie", description = "Update an existent movie", required = true) @Valid @RequestBody Movie movie
    ) {
        return getDelegate().updateMovie(movie);
    }


    /**
     * PUT /movie/{movieId}/rating/{rating} : Provides rating to movie
     * Provides rating to movie
     *
     * @param movieId ID of movie to return (required)
     * @param rating rating value that need to be considered for filter (required)
     * @return successful operation (status code 200)
     *         or Invalid tag value (status code 400)
     */
    @Operation(
        operationId = "updateRating",
        summary = "Provides rating to movie",
        tags = { "movie" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid tag value")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/movie/{movieId}/rating/{rating}",
        produces = { "application/json" }
    )
    default ResponseEntity<Movie> updateRating(
        @Min(1L) @Parameter(name = "movieId", description = "ID of movie to return", required = true) @PathVariable("movieId") Long movieId,
        @Min(0) @Parameter(name = "rating", description = "rating value that need to be considered for filter", required = true) @PathVariable("rating") Integer rating
    ) {
        return getDelegate().updateRating(movieId, rating);
    }

}
