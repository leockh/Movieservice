/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leo.test.movieservice.api;

import com.leo.test.movieservice.model.Director;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "director", description = "the director API")
public interface DirectorApi {

    default DirectorApiDelegate getDelegate() {
        return new DirectorApiDelegate() {};
    }

    /**
     * POST /director : Add Director
     * Add Director
     *
     * @param director  (optional)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addDirector",
        summary = "Add Director",
        tags = { "director" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Director.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/director",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Director> addDirector(
        @Parameter(name = "Director", description = "") @Valid @RequestBody(required = false) Director director
    ) {
        return getDelegate().addDirector(director);
    }


    /**
     * DELETE /director/{directorId} : Delete director by ID
     * Delete director by ID
     *
     * @param directorId ID of the director that needs to be deleted (required)
     * @return Invalid ID supplied (status code 400)
     *         or Director not found (status code 404)
     */
    @Operation(
        operationId = "deleteDirector",
        summary = "Delete director by ID",
        tags = { "director" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Director not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/director/{directorId}"
    )
    default ResponseEntity<Void> deleteDirector(
        @Parameter(name = "directorId", description = "ID of the director that needs to be deleted", required = true) @PathVariable("directorId") Long directorId
    ) {
        return getDelegate().deleteDirector(directorId);
    }


    /**
     * GET /director : Returns all director
     * Returns all director
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getAllDirectors",
        summary = "Returns all director",
        tags = { "director" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Director.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/director",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Director>> getAllDirectors(
        
    ) {
        return getDelegate().getAllDirectors();
    }


    /**
     * GET /director/{directorId} : Find director by ID
     * Find director by ID
     *
     * @param directorId ID of director that needs to be fetched (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Director not found (status code 404)
     */
    @Operation(
        operationId = "getDirectorById",
        summary = "Find director by ID",
        tags = { "director" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Director.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Director not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/director/{directorId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Director> getDirectorById(
        @Parameter(name = "directorId", description = "ID of director that needs to be fetched", required = true) @PathVariable("directorId") Long directorId
    ) {
        return getDelegate().getDirectorById(directorId);
    }


    /**
     * PUT /director : Update Director
     * Update Director
     *
     * @param director  (optional)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateDirector",
        summary = "Update Director",
        tags = { "director" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Director.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/director",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Director> updateDirector(
        @Parameter(name = "Director", description = "") @Valid @RequestBody(required = false) Director director
    ) {
        return getDelegate().updateDirector(director);
    }

}
